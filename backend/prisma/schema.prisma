generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id        String   @id
  img       String
  name      String
  email     String   @unique
  password  String
  createdAt DateTime
  updatedAt DateTime @updatedAt

  userPlatforms    UserPlatform[]
  userGames        UserGame[]
  userTeams        UserTeam[]
  sentMessages     UserToUserMessage[] @relation(name: "sender")
  receivedMessages UserToUserMessage[] @relation(name: "receiver")
  teamMessages     UserToTeamMessage[]
  teamSolicitation JoinTeamRequest[]
}

model UserPlatform {
  userId     String
  platformId String

  user     User     @relation(fields: [userId], references: [id])
  platform Platform @relation(fields: [platformId], references: [id])

  @@id([userId, platformId])
}

model UserGame {
  userId String
  gameId String

  user User @relation(fields: [userId], references: [id])
  game Game @relation(fields: [gameId], references: [id])

  @@id([userId, gameId])
}

model UserTeam {
  userId      String
  teamId      String
  isModerator Boolean

  user User @relation(fields: [userId], references: [id])
  team Team @relation(fields: [teamId], references: [id])

  @@id([userId, teamId])
}

model Platform {
  id        String   @id
  img       String
  name      String   @unique
  createdAt DateTime
  updatedAt DateTime @updatedAt

  userPlatforms UserPlatform[]
  gamePlatforms GamePlatform[]
}

model Game {
  id        String   @id
  img       String
  name      String   @unique
  createdAt DateTime
  updatedAt DateTime @updatedAt

  userGames     UserGame[]
  gamePlatforms GamePlatform[]
  teams         Team[]
}

model GamePlatform {
  gameId     String
  platformId String

  game     Game     @relation(fields: [gameId], references: [id])
  platform Platform @relation(fields: [platformId], references: [id])

  @@id([gameId, platformId])
}

model Team {
  id          String   @id
  gameId      String
  name        String
  description String
  isPublic    Boolean
  isOpen      Boolean
  createdAt   DateTime
  updatedAt   DateTime @updatedAt

  game         Game                @relation(fields: [gameId], references: [id])
  members      UserTeam[]
  teamMessages UserToTeamMessage[]
  requests     JoinTeamRequest[]
}

model JoinTeamRequest {
  id        String   @id
  userId    String
  teamId    String
  status    String
  createdAt DateTime
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
  team Team @relation(fields: [teamId], references: [id])
}

model Message {
  id        String   @id
  content   String
  createdAt DateTime
  updatedAt DateTime @updatedAt

  userToUserMessages UserToUserMessage[]
  userToTeamMessages UserToTeamMessage[]
}

model UserToUserMessage {
  id         String @id
  senderId   String
  receiverId String
  messageId  String

  sender   User    @relation(fields: [senderId], references: [id], name: "sender")
  receiver User    @relation(fields: [receiverId], references: [id], name: "receiver")
  message  Message @relation(fields: [messageId], references: [id])
}

model UserToTeamMessage {
  id        String @id
  senderId  String
  teamId    String
  messageId String

  sender  User    @relation(fields: [senderId], references: [id])
  team    Team    @relation(fields: [teamId], references: [id])
  message Message @relation(fields: [messageId], references: [id])
}
