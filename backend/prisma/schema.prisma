generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

model User {
  id          String   @id
  steamId     String?  @unique
  img         String
  name        String   @unique
  displayName String
  email       String?  @unique
  password    String
  createdAt   DateTime
  updatedAt   DateTime @updatedAt

  userPlatforms UserPlatform[]
  userGames     UserGame[]
  contacts      UserContact[]
}

model UserPlatform {
  userId     String
  platformId String

  user     User     @relation(fields: [userId], references: [id], onUpdate: Cascade)
  platform Platform @relation(fields: [platformId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([userId, platformId])
}

model UserGame {
  userId   String
  gameId   String
  playTime String
  rank     String

  user User @relation(fields: [userId], references: [id], onUpdate: Cascade)
  game Game @relation(fields: [gameId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([userId, gameId])
}

model UserContact {
  id        String   @id
  userId    String
  platform  String
  name      String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

model Platform {
  id        String   @id
  img       String
  name      String   @unique
  createdAt DateTime
  updatedAt DateTime @updatedAt

  userPlatforms UserPlatform[]
  gamePlatforms GamePlatform[]
}

model Game {
  id         String   @id
  bannerImg  String
  profileImg String
  name       String   @unique
  createdAt  DateTime
  updatedAt  DateTime @updatedAt

  userGames     UserGame[]
  gamePlatforms GamePlatform[]
}

model GamePlatform {
  gameId     String
  platformId String

  game     Game     @relation(fields: [gameId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  platform Platform @relation(fields: [platformId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([gameId, platformId])
}
